import { ClangASTD } from "./clang-ast";
import { existsSync, readFileSync, rmSync, writeFileSync } from "node:fs";
import { join } from "node:path";
import { cTypeToTypeScript } from "./c-type-parser";

const ast = JSON.parse(readFileSync(join(__dirname, "ast.json"), "utf-8")) as ClangASTD;

const targetFile = 'binding_types.h'
const outputFile = 'binding_qjs.h'
// filter out loc.file contains targetFile

const origFile = readFileSync(join(__dirname, '../../src/shell/script/binding_types.h'), 'utf-8').split('\n').map(v => v.trim())

let binding =
    `// This file is generated by scripts/bindgen/index.ts
// Do not modify this file manually!

#pragma once
#include "binding_types.h"
#include "quickjs.h"
#include "quickjspp.hpp"

template <typename T>
struct js_bind {
    static void bind(qjs::Context::Module &mod) {}
};
`

let typescriptDef = `// This file is generated by scripts/bindgen/index.ts
// Do not modify this file manually!

declare module 'mshell' {

`

const parseFunctionQualType = (type: string) => {
    // std::variant<int, std::string> (std::string, std::string)
    // std::function<void(int, std::string)> (int, std::string)

    enum State {
        ReturnType,
        Args,
        Done
    }

    let state = State.ReturnType;
    let returnType = '';
    let currentArg = '';
    let args: string[] = [];
    let depth = 0;
    let angleBracketDepth = 0;

    for (let i = 0; i < type.length; i++) {
        const char = type[i];

        if (char === '<') {
            angleBracketDepth++;
        } else if (char === '>') {
            angleBracketDepth--;
        }

        switch (state) {
            case State.ReturnType:
                if (char === '(' && angleBracketDepth === 0) {
                    state = State.Args;
                    returnType = returnType.trim();
                } else {
                    returnType += char;
                }
                break;

            case State.Args:
                if (char === '(') depth++;
                if (char === ')') {
                    if (depth === 0 && angleBracketDepth === 0) {
                        if (currentArg.trim()) args.push(currentArg.trim());
                        state = State.Done;
                        break;
                    }
                    depth--;
                }
                if (char === ',' && depth === 0 && angleBracketDepth === 0) {
                    args.push(currentArg.trim());
                    currentArg = '';
                } else {
                    currentArg += char;
                }
                break;
        }
    }

    if (state !== State.Done) {
        throw new Error('Invalid function type');
    }

    return {
        returnType,
        args
    };
}

if (ast.kind !== 'NamespaceDecl') {
    throw new Error('Root node is not a NamespaceDecl');
}

let currentNamespace = 'mb_shell::js'

const generateForRecordDecl = (node_struct: ClangASTD) => {
    if (node_struct.kind !== 'CXXRecordDecl') {
        throw new Error('Node is not a RecordDecl');
    }

    const structName = node_struct.name;

    const fields: {
        name: string;
        type: string;
        comment?: string;
    }[] = [];

    const methods: {
        name: string;
        returnType: string;
        args: string[];
        static: boolean;
        comment?: string;
        argNames?: string[];
    }[] = [];

    if (!node_struct.inner) return;

    for (const node of node_struct.inner) {
        if (node.name?.startsWith('$')) continue;

        const lineNum = node.loc?.line;
        // find comment above
        let comment = '';

        if (lineNum) {
            let rangeCommentCnt = 0;
            for (let i = lineNum - 2; i >= 0; i--) {
                const line = origFile[i];
                if (!line) continue;
                if (line.startsWith('//')) {
                    comment = line.substring(2) + '\n' + comment;
                    continue;
                }
                if (line.startsWith('/*')) {
                    rangeCommentCnt++;
                    continue;
                }
                if (line.endsWith('*/')) {
                    rangeCommentCnt--;
                    continue;
                }

                if (rangeCommentCnt === 0) break;
                else comment = line + '\n' + comment;
            }
        }

        if (node.kind === 'FieldDecl') {
            fields.push({
                name: node.name!,
                type: node.type!.qualType,
                comment: comment.length > 0 ? comment : undefined
            });
        }

        if (node.kind === 'CXXMethodDecl') {
            const parsed = parseFunctionQualType(node.type!.qualType);

            if (
                ['operator='].includes(node.name!)
            ) continue;

            const argNames: string[] = [];
            if (node.inner) {
                for (const arg of node.inner) {
                    if (arg.kind === 'ParmVarDecl') {
                        argNames.push(arg.name!);
                    }
                }
            }

            methods.push({
                name: node.name!,
                returnType: parsed.returnType,
                args: parsed.args,
                static: node.storageClass === 'static',
                comment: comment.length > 0 ? comment : undefined,
                argNames
            });
        }
    }

    console.log({
        structName, fields, methods
    });

    binding += `
template <> struct qjs::js_traits<${currentNamespace}::${structName}> {
    static ${currentNamespace}::${structName} unwrap(JSContext *ctx, JSValueConst v) {
        ${currentNamespace}::${structName} obj;
    `;

    for (const field of fields) {
        binding += `
        obj.${field.name} = js_traits<${field.type}>::unwrap(ctx, JS_GetPropertyStr(ctx, v, "${field.name}"));
        `;
    }

    binding += `
        return obj;
    }

    static JSValue wrap(JSContext *ctx, const ${currentNamespace}::${structName} &val) noexcept {
        JSValue obj = JS_NewObject(ctx);
    `;

    for (const field of fields) {
        binding += `
        JS_SetPropertyStr(ctx, obj, "${field.name}", js_traits<${field.type}>::wrap(ctx, val.${field.name}));
        `;
    }

    binding += `
        return obj;
    }
};`;

    /**
     * 
     *   module.class_<MyClass>("MyClass")
                    .constructor<>()
                    .constructor<std::vector<int>>("MyClassA")
                    .fun<&MyClass::member_variable>("member_variable")
                    .fun<&MyClass::member_function>("member_function")
                    .static_fun<&MyClass::static_function>("static_function")
     */
    binding += `
template<> struct js_bind<${currentNamespace}::${structName}> {
    static void bind(qjs::Context::Module &mod) {
        mod.class_<${currentNamespace}::${structName}>("${structName}")
            .constructor<>()`;
    for (const method of methods) {
        if (method.static) {
            binding += `
                .static_fun<&${currentNamespace}::${structName}::${method.name}>("${method.name}")`;
        } else {
            binding += `
                .fun<&${currentNamespace}::${structName}::${method.name}>("${method.name}")`;
        }
    }

    for (const field of fields) {
        binding += `
                .fun<&${currentNamespace}::${structName}::${field.name}>("${field.name}")`;
    }

    binding += `
            ;
    }

};
    `;

    typescriptDef += `
export class ${structName} {
\t${fields.map(field => {
        let fieldDef = `${field.name}${field.type.startsWith('std::optional') ? '?' : ''
            }: ${cTypeToTypeScript(field.type)}`;

        if (field.comment) {
                fieldDef = `
  /**
  * ${field.comment.trim().split('\n').join('\n  * ')}
  */
  ${fieldDef}
            `
        }

        return fieldDef;
    }).join('\n\t')}
\t${methods.map(method => {
        let methodDef = `${method.static ? 'static ' : ''}${method.name}: ${cTypeToTypeScript(`${method.returnType}(${method.args.join(', ')})`)}`

        // if (method.comment) {
        //     methodDef = method.comment.trim().split('\n').map(v => `// ${v}`).join('\n\t')
        //         + '\n\t' + methodDef;
        // }

        // if (method.argNames) {
        //     methodDef = '// Args: ' + method.argNames.join(', ') + '\n\t' + methodDef;
        // }
        let comments = '';
        if (method.comment) {
            comments += method.comment.trim();
        }
            methodDef = `
/**
  * ${comments.split('\n').join('\n  * ')}
  * @param ${method.args.map((arg    , i) => `${method.argNames![i]}: ${cTypeToTypeScript(arg)}`).join(', ')}
  * @returns ${cTypeToTypeScript(method.returnType)}
  */
  ${methodDef}
            `
        return methodDef;
    }).join('\n\t')}
}
    `;

}

const structNames: string[] = []
for (const node of ast.inner!) {
    if (node.kind === 'CXXRecordDecl') {
        generateForRecordDecl(node);
        if (node.name && node.inner)
            structNames.push(node.name);
    }
}

binding += `
inline void bindAll(qjs::Context::Module &mod) {
`

for (const structName of structNames) {
    binding += `
    js_bind<${currentNamespace}::${structName}>::bind(mod);
`
}

binding += `
}
`

typescriptDef += `
}
`

const paths = [
    join(__dirname, 'src/shell/script'),
    join(__dirname, '../src/shell/script'),
    join(__dirname, '../../src/shell/script')
]

typescriptDef += readFileSync(join(__dirname, 'quickjs-types.txt'), 'utf-8');

for (const path of paths) {
    try {
        if (existsSync(join(path, targetFile))) {
            writeFileSync(join(path, outputFile), binding);
            writeFileSync(join(path, 'binding_types.d.ts'), typescriptDef);
            break;
        }
    } catch (e) {
        console.error(e);
    }
}

rmSync(join(__dirname, 'ast.json'));